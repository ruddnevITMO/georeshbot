#!/usr/bin/env python

from dotenv import load_dotenv
load_dotenv()

import logging 
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

import re # for parsing file input
import os # for removing files
import magic # for guessing file type
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

hwNums = [1, 2, 3, 4, 5]
prohibitedUserIDs = [848733048, 430123872]
prohibitedUsernames = []

id = 0
dlId = 0
acceptedChars = list("[] .-1234567890;")
acceptedChars.append("\n")



hwList = """

–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã - 1
–û–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –°–õ–ê–£ - 2
–õ–∏–Ω–µ–π–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ - 3
–ù–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –°–õ–ê–£ - 4
–°—É–º–º–∞ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ - 5

"""

beforeExampleText = """

üíπ *–≠—Ç—É –¥–æ–º–∞—à–∫—É –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–æ—Ç–∞\! –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–º–∞—à–∫–∏ –Ω–∞ –≥–µ–æ–ª–∏–Ω–µ, –Ω–∞–∂–∞—Ç—å Ctrl\+S, –∫—É–¥–∞\-–Ω–∏–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –±–æ—Ç—É\.*
*‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ*

–ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é, —Ç–æ –≤–æ—Ç –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:

"""

async def slaewrite1(str):
    coefficients = []
    result = '['
    str = str.replace(" ", "")
    equations = re.split(r'\\\\', str)
    for i in equations:
        coefficients.append(re.findall(r'(?:[-\^]?\d+)|(?:[-]+)', i))
    for i in coefficients:
        lastindex = 0
        for j in range(len(i)):
            if i[j] == '-':
                i[j] = '-1'
            if i[j][0] == '^':
                while int(i[j][1]) - lastindex > 1:
                    result += '0 '
                    lastindex += 1
                if j != 0:
                    if i[j - 1][0] != '^':
                        result += i[j - 1] + ' '
                    else:
                        result += '1 '
                elif j == 0:
                    result += '1 '
                lastindex += 1
            elif j == len(i) - 1:
                while lastindex < 5:
                    result += '0 '
                    lastindex += 1
                result += i[j] + '; '
    result = result[:-2] + ']'
    return result

async def slaewrite2(str):
    coefficients = []
    result = '['
    str = str.replace(" ", "")
    equations = re.split(r'\\\\', str)
    for i in equations:
        coefficients.append(re.findall(r'(?:[-\^]?\d+)|(?:[-]+)', i))
    for i in coefficients:
        lastindex = 0
        for j in range(len(i) - 1):
            if i[j] == '-':
                i[j] = '-1'
            if i[j][0] == '^':
                while int(i[j][1]) - lastindex > 1:
                    result += '0 '
                    lastindex += 1
                if j != 0:
                    if i[j - 1][0] != '^':
                        result += i[j - 1] + ' '
                    else:
                        result += '1 '
                elif j == 0:
                    result += '1 '
                lastindex += 1
                if j == len(i) - 2:
                    while lastindex < 5:
                        result += '0 '
                        lastindex += 1
                    result += '; '
    result = result[:-2] + ']'
    return result


# Remove temporary files on start
rootFolder = os.getcwd()
for item in os.listdir(rootFolder):
    if item.endswith(".txt"):
        os.remove(os.path.join(rootFolder, item))

# Get examples and count conditions for a card, then count row length
hwExamples = {}
hwConditionCount = {}
hwRowsLengths = {}
for fileName in os.listdir("examples"):
    with open(os.path.join("examples", fileName), encoding="utf-8") as file:
        card = int(fileName.replace(".txt", ""))
        fullText = file.read()
        hwExamples[card] = fullText
        conditions = list(filter(None, fullText.split("\n")))
        hwConditionCount[card] = len(conditions)
        hwRowsLengths[card] = [len(list(filter(None, condition[1:-1].split(";")[0].split()))) for condition in conditions]

# Get descriptions
hwDescriptions = {}
for fileName in os.listdir("descriptions"):
    with open(os.path.join("descriptions", fileName), encoding="utf-8") as file:
        card = int(fileName.replace(".txt", ""))
        hwDescriptions[card] = file.read()


async def startCommand(update: Update, context: ContextTypes.DEFAULT_TYPE, fromHelp = False) -> None:
    await beforeRunning(update, context)
    user = update.effective_user
    if not fromHelp:
        await update.message.reply_html(f"–ó–¥–∞—Ä–æ–≤–∞ {user.mention_html()}!")
    await update.message.reply_text(f"–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –Ω–æ–º–µ—Ä –¥–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: {hwList}", disable_notification=True)
    await update.message.reply_text("""
üíπ *–õ—é–±—É—é –¥–æ–º–∞—à–∫—É –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–æ—Ç\. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–º–∞—à–∫–∏ –Ω–∞ –≥–µ–æ–ª–∏–Ω–µ, –Ω–∞–∂–∞—Ç—å Ctrl\+S, –∫—É–¥–∞\-–Ω–∏–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –±–æ—Ç—É\.*
*‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, —É –ë–ò–¢ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –î–ó 2, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –¥—Ä—É–≥–æ–µ 6 –∑–∞–¥–∞–Ω–∏–µ*

–ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Ä—É—á–Ω—É—é, —Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–∞–∫:

–£—Å–ª–æ–≤–∏—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ —á—Ç–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∞—Ç—Ä–∏—Ü–∞ 2x5 –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫ 
`\[1 2 3 4 5; 6 7 8 9 10\]`
–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –≤–∏–¥–∞ 3x1 —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º —Ç–∞–∫
`\[1 2 3\]`\.

–ï—Å–ª–∏ –≤ —É—Å–ª–æ–≤–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—Ä–∏—Ü, –ø–∏—à–µ–º –Ω–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\. 

–ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞, —Ç–æ —Å—á–∏—Ç–∞—Ç—å –µ—ë –∑–∞ –º–∞—Ç—Ä–∏—Ü—É `\[1 2 3; 4 5 6\]`, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–∞—è \(e1 e2 e4 \- –Ω–µ—Ç e3\), –Ω–∞ –µ–µ –º–µ—Å—Ç–æ —Å—Ç–∞–≤–∏–º 0, —ç—Ç–æ –≤–∞–∂–Ω–æ\!
""", parse_mode='MarkdownV2', disable_notification=True)


async def helpCommand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await beforeRunning(update, context)
    await startCommand(update, context, fromHelp=True)


async def matlabText(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await beforeRunning(update, context): return

    message = update.message.text

    if message.count("<") > 10:
        await update.message.reply_text("üò† HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –±–æ—Ç—É.")
        return 

    # Check for illegal characters
    for character in message:
        if character not in acceptedChars:
            await update.message.reply_text("–í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä \"" + character + "\"\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
            return
    conditions = message.split("\n")
    await matlab(update, context, conditions=conditions)


async def matlabFile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await beforeRunning(update, context): return

    global dlId
    dlId += 1
    dlFileName = "dlId" + str(dlId) + ".txt"
    dl = await context.bot.get_file(update.message.document)
    if dl.file_size > 1_000_000:
        await update.message.reply_text("–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!")
        os.remove(dlFileName)
        return

    await dl.download_to_drive(dlFileName)

    if not magic.from_file(dlFileName).count("HTML document"):
        await update.message.reply_text("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTML-–∫–æ–¥–æ–º. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫: –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–º–∞—à–∫–∏, –¥–æ–∂–∏–¥–∞–µ—Ç–µ—Å—å –µ–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–∏–º–∞–µ—Ç–µ Ctrl+S, –∫—É–¥–∞-–Ω–∏–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª, –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –µ–≥–æ –±–æ—Ç—É.")
        return

    with open(dlFileName, encoding="utf8") as file:
        fullText = file.read()
    os.remove(dlFileName)


    if fullText.count('–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã'): # HW 1
        found = re.findall(r'(?:begin\{pmatrix\}.*?end\{pmatrix\})|(?:\\left.*?\\right)', fullText)
        conditions = ['1']
        delete = [0, 1, 2, 12]
        for element in found:
            if found.index(element) not in delete: 
                conditions.append(str(re.findall(r'[-]?\d+', element)))
        conditions = [element.replace("\'", "").replace(",","") for element in conditions]

    elif fullText.count('–û–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –°–õ–ê–£'): # HW 2
        f = fullText.replace("\n", "")
        task5 = re.findall(r'= \(.*?\)', f)
        task2 = re.findall(r'begin\{array\}.*?end\{array\}', f)
        task1 = re.findall(r'begin\{cases\}.*?end\{cases\}', f)
        task4 = [task1.pop()]
        task3 = [task1.pop()]
        task6 = [task2.pop()]
        task2 = re.split(r'\\\\', task2[0])
        task2.pop()
        task6 = re.split(r'\\\\', task6[0])
        task6.pop()
        result = ['2']
        result.append(await slaewrite2(task1[0]))
        for i in task2:
            result.append(str(re.findall(r'[-]?\d+', i)))
        result.append(await slaewrite2(task3[0]))
        result.append(await slaewrite2(task4[0]))
        for i in task5:
            result.append(str(re.findall(r'[-]?\d+', i)))
        for i in task6:
            result.append(str(re.findall(r'[-]?\d+', i)))
        conditions = [element.replace("\'", "").replace(",","").replace(" ;", ";") for element in result]

    elif fullText.count('–õ–∏–Ω–µ–π–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞'): # HW 3
        f = fullText.replace("\n", "")
        f = re.findall(r'begin\{array\}.*?end\{array\}',f)
        result = ['3']
        for i in f:
            task5 = re.findall(r'[-]?\d+', i)
            result.append(str(task5))
        result.pop()
        for i in range(4):
            result.append("[" + ' '.join(task5[i*4:(i+1)*4]) + "]")
        conditions = [element.replace("\'", "").replace(",","") for element in result]

    elif fullText.count('–ù–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –°–õ–ê–£'): # HW 4
        f = fullText.replace("\n", "")
        slae = re.findall(r'begin\{cases\}.*?end\{cases\}', f)
        result = ['4']
        result.append(await slaewrite1(slae[0]))
        for i in range(1, 5):
            numbers = re.findall(r'[-]?\d+', slae[i])
            for j in reversed(range(len(numbers))):
                if j % 2 == 0: numbers.pop(j)
            result.append(str(numbers))
        result.append(await slaewrite2(slae[5]))
        result.append(await slaewrite1(slae[6]))
        vectors = re.findall(r'= \(.*?\)', f)
        for i in vectors:
            result.append(str(re.findall(r'[-]?\d+', i)))
        conditions = [element.replace("\'", "").replace(",","") for element in result]

    elif fullText.count('–°—É–º–º–∞ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤'): # HW 5
        f = fullText.replace("\n", "")
        tasks = re.findall('(?:—Å—É–º–º—ã)|(?:–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)',f)
        if tasks[3] == '—Å—É–º–º—ã': 
            Task4Flag = 1
        else: 
            Task4Flag = 0
        f = re.findall(r'begin\{array\}.*?end\{array\}',f)
        result = ['5']
        delete = []
        for i in f:
            if f.index(i) not in delete: 
                result.append(str(re.findall(r'[-]?\d+',i)))
        result = result[:21:]
        conditions = [element.replace("\'", "").replace(",","") for element in result]

    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞—à —Ñ–∞–π–ª. –ï—â—ë —Ä–∞–∑: –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–º–∞—à–∫–∏, –¥–æ–∂–∏–¥–∞–µ—Ç–µ—Å—å –µ–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–∏–º–∞–µ—Ç–µ Ctrl+S, –∫—É–¥–∞-–Ω–∏–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª, –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –µ–≥–æ –±–æ—Ç—É.")
        return


    # Check for illegal characters
    for element in conditions:
        for character in element:
            if character not in acceptedChars:
                await update.message.reply_text("–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä \"" + character + "\"\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
                return

    await matlab(update, context, conditions=conditions)


async def matlab(update: Update, context: ContextTypes.DEFAULT_TYPE, conditions) -> None:
    conditions = list(filter(None, conditions))
    hw = conditions[0].strip() # Number of the homework

    # Check if hw number is really a number
    for character in hw:
        if character not in '1234567890':
            await update.message.reply_text("–ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –¥–æ–º–∞—à–∫–∏!")
            return

    hw = int(hw)

    # Check if this homework is registered
    if hw not in hwNums:
        await update.message.reply_text("–ù–µ –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ –∑–∞ –¥–æ–º–∞—à–∫–∞ —Ç–∞–∫–∞—è")
        return

    # Only homework oneline
    if len(conditions) == 1:
        await update.message.reply_text(hwDescriptions[hw])
        await update.message.reply_text(beforeExampleText, parse_mode='MarkdownV2', disable_notification=True)
        await update.message.reply_text(f"```\n{hwExamples[hw]}\n```", parse_mode='MarkdownV2', disable_notification=True)
        return
        
    # Check if amount of conditions is same as needed
    if len(conditions) != hwConditionCount[hw]:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: " + str(len(conditions)-1) + ", —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –î–ó ‚Ññ" + str(hw) + " –Ω—É–∂–Ω–æ " + str(hwConditionCount[hw]) + " —É—Å–ª–æ–≤–∏–π!") 
        return


    # Check for matrix length and for matrix rows to be the same length 
    for i in range(len(conditions)):
        condition = conditions[i]
        rowsLengths = [len(list(filter(None, row.split()))) for row in condition[1:-1].split(";")]
        if len(set(rowsLengths)) != 1:
            await update.message.reply_text("‚ö†Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç—Ä–æ–∫–µ:\n`" + condition.replace('-', '\\-') + "`\n\n–ï—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–∞—è \(e1 e2 e4 \- –Ω–µ—Ç e3\), –Ω–∞ –µ–µ –º–µ—Å—Ç–æ —Å—Ç–∞–≤–∏–º 0, —ç—Ç–æ –≤–∞–∂–Ω–æ\!", parse_mode='MarkdownV2')    
            return
        elif i != 0 and rowsLengths[0] != hwRowsLengths[hw][i]:
            await update.message.reply_text("‚ö†Ô∏è –í —É—Å–ª–æ–≤–∏–∏ `" + condition.replace('-', '\\-') + "`–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã\! –ß–∏—Å–µ–ª –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å " + str(hwRowsLengths[hw][i+1]) + ", –∞ —É –≤–∞—Å " + str(rowsLengths[0]) + "\!", parse_mode='MarkdownV2')    
            return

    global id
    id += 1

    # logging
    print("___")
    print("–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ " + str(id) + ", –¥–∑ " + str(hw) + " –¥–ª—è " + str(update.message.from_user['username']))
    print(conditions)

    pendingMessage = await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É..\n\n‚ö†Ô∏è –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 —Å–µ–∫—É–Ω–¥ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç, –∑–Ω–∞—á–∏—Ç —á—Ç–æ –±–æ—Ç –∑–∞–≤–∏—Å/–≤—ã–∫–ª—é—á–∏–ª—Å—è") 

    fileName = "id" + str(id) + ".txt"
    inputArgs = str(id) + ", " + ', '.join(conditions[1:hwConditionCount[hw]+1])


    os.system("matlab -nosplash -nodesktop -minimize -r \"try, dz" + str(hw) + "(" + inputArgs + "), catch, exit, end, exit\"")
    
    waitedTime = 0
    while not os.path.exists(fileName):
        if waitedTime > 5:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –≤—ã—Å—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ —É—Å–ª–æ–≤–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞.")
            return
        await asyncio.sleep(1)
        waitedTime += 1
    await asyncio.sleep(1)

    with open(fileName, encoding="utf-8") as file:
        line = "*–î–ó ‚Ññ" + str(hw) + "*\n" + file.readline().rstrip().replace(">", "\n")
        if hw != 4:
            line = line.replace("[", "`[").replace("]", "]`")

    await context.bot.deleteMessage(message_id = pendingMessage.message_id, chat_id = update.message.chat_id)
    await update.message.reply_text(line, parse_mode='MarkdownV2')    
    
    print("–ó–∞–≤–µ—Ä—à–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ " + str(id) + ", –¥–∑ " + str(hw) + " –¥–ª—è " + str(update.message.from_user['username']))


async def beforeRunning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if str(update.message.chat_id) != os.getenv("LOG"):
        await context.bot.forward_message(chat_id = os.getenv("LOG"), from_chat_id = update.message.chat_id, message_id = update.message.id)

    if update.message.from_user.id in prohibitedUserIDs or update.message.from_user.username in prohibitedUsernames:
        await context.bot.forward_message(chat_id = os.getenv("DEV"), from_chat_id = update.message.chat_id, message_id = update.message.id)
        return False

    return True
    


def main() -> None:
    
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    application.add_handler(CommandHandler("start", startCommand))
    application.add_handler(CommandHandler("help", helpCommand))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, matlabText))
    application.add_handler(MessageHandler(filters.ATTACHMENT, matlabFile))

    application.run_polling()


if __name__ == "__main__":
    main()